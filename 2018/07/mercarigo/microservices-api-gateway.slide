API GatewayによるMicroservices化
mercari.go#1
3 Jul 2018

Taichi Nakashima
@deeeet

* About me

.image img/deeeet.png 200 _

- *@deeeet* / *@tcnksm* (GitHub)
- Blog on [[https://deeeet.com][deeeet.com]]
- Tech lead at [[https://open.talentio.com/1/c/mercari/requisitions/detail/7877][Mercari microservices platform team]]

* Mercari Meetup for Microservices Platform 7/19

遊びに来てくれ！

.image img/meetup-logo.png 350 _
.caption [[https://mercari.connpass.com/event/92168/][https://mercari.connpass.com/event/92168/]]

* tl;dr

Mercari Microservices化のために開発したAPI Gatewayについて紹介する．

- API Gatewayとは何か?
- API Gatewayの実装思想は?
- API Gatewayの機能の実装方法は?

* Background for Microservices

Monolithアーキテクチャにより高速なサービス開発をしてきた一方でコードベースの巨大化により以下が問題になってきた

- 変更による影響範囲の不明確化
- テストの複雑化
- On-boardingコストの増加
- 障害のIsolation
- ...

今後さらなるサービスの拡大によって組織が成長しても「開発スピードを落とさない・むしろ上げる!」「個のパフォーマンスを最大限に高める」ためにMicroservicesアーキテクチャへの移行を始めた

* API gateway for Microservices?

.image img/api-gateway.png 500 _

* API gateway for Microservices?

MicroservicesアーキテクチャにおけるAPI Gatewayの役割

- クライアントからのリクエストを単一のEndpointで受けRoutingを行う
- （Internet facingの）各Microservicesが持つべき共通処理(*)をOffloadする
- MonolithへのリクエストをProxyし段階的なサービス分割を補助する

(*)共通処理

- SSL termination
- DDoS protection
- Request buffering
- AuthN/AuthZ
- Observability

# クライアントから見ると1つのAPIにリクエストを投げているように見える．新規にサービスを分割してもクライアントの変更は必要なくGatewayのRoutingを変更するだけでよくなる

* API gateway for Microservices?

MonolithへのリクエストをProxyし段階的なサービス分割を補助する．

.image img/gateway-routing.png 500 _

* API gateway for *Mercari* Microservices?

MercariのAPI gatewayが満たすべきこと

- High performance（ピーク時約56,000req/sec）
- 内製サービス（e.g., Authentication service）と連携する
- Microservices間の通信にgRPCを利用する（Protocol transformation）
- 日本だけではなく他のRegionや他のサービスでも利用できるようにする

* VS.

以下の利用を検討した

- [[https://www.nginx.com/][Nginx]]
- [[https://envoyproxy.github.io/][Envoy]]
- [[https://istio.io/docs/tasks/traffic-management/ingress/][Istio ingress]]
- [[https://traefik.io/][Traefik]]
- [[https://github.com/Mashape/kong][Kong]]
- [[https://www.getambassador.io/][Ambassador]]
- [[https://github.com/fabiolb/fabio][fabio]]
- [[https://github.com/micro/micro][micro]]
- [[https://github.com/devopsfaith/krakend][krakend]]

* VS.

- やりたいこと全て満たすのが難しい（e.g.,内製サービスとの連携）
- LuaやC++ではなくMercari Engineerが誰でも使える言語で拡張したい

内製することに!

* Implementation

* Infrastructure

.image img/infra.png 550 _

* Infrastructure

Microservicesの基盤はCloud（GCP）上に構築してる

- 各MicroservicesはコンテナとしてGoogle Kubernetes Engine（GKE）で動かす
- 各MicroservicesのDBはManaged Service（CloudSQLやSpanner）を利用する

API GatewayもGKE上で動かしている

詳しくは[[https://speakerdeck.com/tcnksm/microservices-on-gke-at-mercari][Microservices on GKE at Mercari]]

* Technical stack

- [[https://cloud.google.com/load-balancing/][Google Load Balancer (GLB)]]
- Go

* Google Load Balancer (GLB)

現在は以下を担う部分として利用している

- SSL termination
- DDoS protection

将来的には以下での利用を検討している

- [[https://cloud.google.com/armor/][Cloud Armor]]を利用したセキュリティの強化
- [[https://cloud.google.com/kubernetes-engine/docs/how-to/multi-cluster-ingress][Multi Cluster Ingress]]を利用した複数RegionへのCluster分散によるHAの確保

* Go

*Why?* Goは今後Mercariのメインの言語になっていく．Goさえ知っていれば誰でもAPI gatewayを拡張できるようにしたい．

以下の機能を実装

- Routing
- Load balancing
- Canary rollout
- Protocol transformation (HTTP to gRPC)
- Observability
- DNS cache
- Request buffering
- ...

* Only Go

[[https://deeeet.com/writing/2018/05/22/service-mesh/][Service mesh]]（Istio）の将来的な導入を考慮しNgnixなどの依存は極力減らした．

* Design

- Gopher friendly
- Core as a package
- Excluding business logic
- Middleware driven

* Gopher friendly

* Gopher friendly

「Goさえ知っていれば誰でもAPI Gatewayを拡張できる」

なるべく標準ライブラリや標準の作法を組み合わせて実装する．例えばサーバー実装は`net/http`のみを使う，テストは`testing`でTable drivenを使う，Middlewareパターン（後述）を使うなど．

* Gopher friendly

某有名なスーパーGoハッカーの声

.image img/tweet.jpg 200 _

* Core as a package

* Core as a package

Core packageとそれを使った具体的な実装に分離した．

- Regionや他サービスごとの実装を可能にするため
- 実装の責任範囲を明確に分離するため

* Core as a package

Regionや他サービスごとの実装を可能にする．

.image img/api-gateway-package.png 300 _

* Core as a package

実装の責任範囲を明確に分離する．

Core packageはSREが，それを使った実装はDeveloperが責任をもつ．

- SREはCore packageに共通処理やパフォーマンスに必要な機能を実装する（Internet facingの扱いはSREの専門的な知識が必要）
- DeveloperはCore packageを使いサービス特有の機能を実装する

* Excluding business logic

* Excluding business logic

API GatewayにBusiness logicを実装できると第2のMonolithになりかねない．

Core packageを使った実装には最小限のことしかできないようにしている．

* Middleware driven

* Middleware driven

Gatewayでの共通処理は全て[[https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81][Middleware]]（Adapter）で実装している．

e.g., アクセスログを記録するMiddleware

.code src/middleware.go /^func with/,/^}/

Middlewareを書くだけでどんどん機能を拡張していける．

* Middleware driven

Coreは以下のようなMiddlewareをもつ

- `withAuth` - 内製のAuthorityサービスによるAuthN/AuthZ
- `withRequestBuffering` - リクエストのBuffering
- `withLog` - アクセスログの記録 (Observability)
- `withDDInstruments` - [[https://www.datadoghq.com/][Datadog]]へのメトリクスの送信 (Observability)
- `withDDTrace` - [[https://www.datadoghq.com/][Datadog]]による分散TracingのSpanの生成 (Observability)
- `withRecover` - panicのrecover+[[https://sentry.io][Sentry]]への通知

Regionやサービス特有の機能を実装して使うこともできる．

* Implementation details

* Implementation details

以下の代表的な機能の実装の詳細を紹介する

- Protocol transformation (HTTP to gRPC)

* Protocol transformation

* Protocol transformation

.image img/protocol-tranformation.png 150 _

やりたいこと

- Client（iOS，Androind）からAPI GatewayまではProtocol buffer over HTTPを使う
- DC内部の通信は全てgRPCを使う

API Gatewayがprotocolの変換（HTTP to gRPC）を担う

* Protocol transformation

なぜClientでProtocol buffer（vs. JSON）?

- ClientでのMessageのValidationコストを下げたい

なぜインターネット上はover HTTP?

- インターネット上でのgRPCの利用事例が少なくまだ懸念があった

なぜDC内部はgRPC（vs. REST）?

- パフォーマンス
- Microservicesのインターフェースのデザインのコスト
- Microservices間のインターフェース定義の統一化

* Protocol transformation

開発者がやること

- サービスのインターフェースをProtocol bufferで定義する
- エンドポイントの定義をGatewayの実装に追加する

* Protocol transformation

サービスのインターフェースをProtocol bufferで定義する（e.g., Echo service）

    service Echo {
       rpc Say(SayRequest) returns (SayResponse) {};
    }

    message SayRequest {
       string message_body = 1;
    }

    message SayResponse {
       string message_body = 1;
    }

Protoの定義から各言語のClientとServerの実装を生成する．

* Protocol transformation

エンドポイントの定義をGatewayの実装に追加する（e.g., Echo service）

.code src/gateway-definition.go /START OMIT/,/END OMIT/

以下のことができるようになる

- Clientは`/services/echo/say`に`SayRequest`をHTTPで投げる
- Gatewayは`SayRequest`を`Say`メソッドでgRPCでEcho serviceに投げる
- GatewayはEcho serviceから`SayResponse`を受けそれをClientにHTTPで返す

* Protocol transformation

Gateway（core package）は何をしているか?

開発者によるエンドポイント定義を基に`http.Handler`を生成する．

（省略版）

.code src/protocol-tranformation.go /^func /,/^}/

* Protocol transformation

他にも

- gRPC error code とHTTP Status codeの変換（ref [[https://github.com/grpc-ecosystem/grpc-gateway][grpc-gateway]]）
- Request Headerを基にJSONでのリクエストも受け付けるように by [[https://godoc.org/github.com/golang/protobuf/jsonpb][jsonpb]]

などを実行している．

* Conclusion

API gatewayとは何か?とその実装思想と詳細について紹介した.

他の機能の実装方法や移行方法など話したいことはたくさんあるがまた別の機会に！

* We're hiring

- [[https://open.talentio.com/1/c/mercari/requisitions/detail/7877][Microservices Platform Team]]: GoによるAPI gatewayや共通サービス・ツールの開発やKubernetesを使った基盤の開発
- [[https://open.talentio.com/1/c/mercari/requisitions/detail/5278][Microservices Development Team]]: GoによるMicroservicesの開発（Monolithからの移行）


* 参考

- [[https://www.slideshare.net/GoogleCloudPlatformJP/microservices-at-mercari][Microservices at Mercari]]
- [[https://speakerdeck.com/tcnksm/microservices-on-gke-at-mercari][Microservices on GKE at Mercari]]
- [[https://docs.microsoft.com/en-us/azure/architecture/patterns/gateway-routing][Gateway Routing pattern]]
- [[https://docs.microsoft.com/en-us/azure/architecture/patterns/gateway-offloading][Gateway Offloading pattern]]
- [[https://www.digitalocean.com/community/tutorials/understanding-nginx-http-proxying-load-balancing-buffering-and-caching][Understanding Nginx HTTP Proxying, Load Balancing, Buffering, and Caching]]
- [[https://mauricio.github.io/golang-proxies/#/][Building a proxy server in Golang]]

* Appendix:  DigitalOcean API gateway

[[https://mauricio.github.io/golang-proxies/#/][Building a proxy server in Golang]]

.code src/digitalocean.go /START OMIT/,/END OMIT/